; Custom labels are defined by putting "@name: " at the beginning of
; a line, e.g.:
;
;   @loop: subleq 1, 2
;
; In addition to "subleq", there is an assembler directive ".data"
; that sets a byte of memory to a value at compile time (note: this
; is not an instruction!):
;
;   .data <X>
;
; X is a signed byte between -128 and 127 (inclusive).
;
; Combining labels and the ".data" directive allows you to develop a
; system of constants and variables. For example, here a byte is set
; to zero, and the label @zero points to that value:
;
;   @zero: .data 0
;
; Note that, while a program is executing, you can view the current
; value of each variable in the variable table on the right (under
; the memory table).
;
; Variables can be used for implementing an unconditional jump:
;
;   subleq @zero, @zero, @next
;
; This will set @zero to @zero - @zero (still zero) and, since the
; result is always <= 0, execution branches to @next.
;
; Below is an updated negation program that repeatedly negates input
; values and writes them out in a loop.

@loop:
subleq @OUT @IN @loop

