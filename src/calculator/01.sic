@loop:
subleq @pint_ret @pint_ret
subleq @pint_ret @b1_np
subleq @0 @0 @pint @b1:
subleq @f @f
subleq @f @c

subleq @a @a
subleq @a @IN
subleq @h @h
subleq @h @a
subleq @a @IN

subleq @pint_ret @pint_ret
subleq @pint_ret @b3_np
subleq @0 @0 @pint @b3:
subleq @g @g
subleq @g @c

subleq @h @c_star @calc_mult
subleq @h @1 @calc_add

@calc_sub:
subleq @f @g
subleq @a @a
subleq @a @f
subleq @OUT @a
subleq @0 @0 @loop

@calc_mult:
subleq @c @c
subleq @c @f
subleq @a @a
subleq @a @c

subleq @c @c
subleq @c @g
subleq @b @b
subleq @b @c

subleq @nmul_ret @nmul_ret
subleq @nmul_ret @b4_np
subleq @0 @0 @nmul @b4:
subleq @OUT @c
subleq @0 @0 @loop

@calc_add:
subleq @a @a
subleq @a @f
subleq @a @g
subleq @OUT @a
subleq @0 @0 @loop

; read chars from @IN until invalid digit, write negated parsed int to @c
@pint:
subleq @d @d
@pint_loop:
subleq @e @e
subleq @e @IN
subleq @b @b
subleq @b @e
subleq @b @n_1
subleq @b @atoi_off @pint_done
subleq @b @1
subleq @e @n_atoi_off

subleq @d @0 @pint_cont ; don't *=10 on first iteration
subleq @a @a
subleq @a @d
subleq @b @b
subleq @b @a
subleq @a @a
subleq @a @n_10

subleq @nmul_ret @nmul_ret
subleq @nmul_ret @b2_np
subleq @0 @0 @nmul @b2:
subleq @d @d
subleq @d @c

@pint_cont:
subleq @d @e
subleq @0 @0 @pint_loop

@pint_done:
subleq @c @c
subleq @c @d
subleq @0 @0 @pint_ret:0

; negative multiplication, for all @a>0, @b>0 set @c=-(@a*@b), @a=@a, @b=0
@nmul:
subleq @c @c
subleq @b @n_1
@nmul_loop:
subleq @b @1 @nmul_done
subleq @c @a
subleq @0 @0 @nmul_loop
@nmul_done:
subleq @0 @0 @nmul_ret:0

@b1_np: .data -@b1
@b2_np: .data -@b2
@b3_np: .data -@b3
@b4_np: .data -@b4

@a: .data 0
@b: .data 0
@c: .data 0
@d: .data 0
@e: .data 0
@f: .data 0
@g: .data 0
@h: .data 0

@atoi_off: .data 48
@n_atoi_off: .data -48
@c_star: .data '*'
@0: .data 0
@1: .data 1
@n_1: .data -1
@n_2: .data -2
@n_3: .data -3
@n_10: .data -10