; The Single Instruction Computer Mark 1 (SIC-1) is an 8-bit computer
; with 256 bytes of memory. Programs for the SIC-1 are written in
; SIC-1 Assembly Language.
;
; Each instruction is 3 bytes, specified as follows:
;
;   subleq <A> <B> [<C>]
;
; A, B, and C are memory addresses (0 - 255) or labels.
;
; "subleq" subtracts the value at address B from the value at address
; A and stores the result at address A (i.e. mem[A] ‚Üê mem[A] -
; mem[B]).
;
; If the result is <= 0, execution branches to address C.
;
; Note that if C is not specified, the address of the next
; instruction is automatically added by the assembler (in effect,
; this means that taking the branch is no different from advancing to
; the next instruction).
;
; For convenience, addresses can be specified using labels. The
; following predefined labels are always available:
;
;   @MAX (252): Maximum user-modifiable address
;   @IN (253): Reads a value from input (writes are ignored)
;   @OUT (254): Writes a result to output (reads as zero)
;   @HALT (255): Terminates the program when accessed
;
; Note: any text following a semicolon is considered a comment.
; Comments are ignored by the assembler.
; 
; Below is a very simple SIC-1 program that negates one input value
; and writes it out.
;
; E.g. if the input value from @IN is 3, it subtracts 3 from @OUT
; (which reads as zero), and the result of 0 - 3 = -3 is written out.

;subleq @OUT, @IN
.data -2 -3 3

; Use the "Compile/Step" (Ctrl+.) and "Run" (Ctrl+Enter) buttons to
; execute the program until all expected outputs have been
; successfully written out (see the "In"/"Expected"/"Out" table to
; the left).
