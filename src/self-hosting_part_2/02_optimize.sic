@prog: .data 0 0 @init_j:@comp_start 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 @prog_end:0

@char: .data 0
@digit_char: .data 0
@n_digit_char: .data 0
@num_count: .data 0
@parsed_int: .data 0
@mul_tmp1: .data 0
@write_tmp: .data 0
@is_neg: .data 0

@n_1: .data -1
@1: .data 1
@n_3: .data -3
@n_15: .data -15
@n_33: .data -33
@32: .data 32

@comp_start:
subleq @init_j @init_j
@comp_next_stmt:
subleq @IN @IN
subleq @IN @IN
subleq @IN @IN
subleq @IN @IN
subleq @IN @IN
subleq @char @char
subleq @char @IN
subleq @char @n_33 @comp_subleq
subleq @char @32 @comp_data

@eval:
!subleq @char @char @HALT

@comp_data:
subleq @num_count @n_1
subleq @parsed_int @parsed_int @parse_int

@comp_subleq:
subleq @IN @IN
subleq @num_count @n_3
subleq @parsed_int @parsed_int @parse_int

@parse_int:
subleq @is_neg @is_neg
@parse_digit:
subleq @digit_char @IN
subleq @digit_char @n_33 @parse_digit_or_sign
subleq @digit_char @digit_char @parse_done
@parse_digit_or_sign:
subleq @digit_char @n_15 @parse_pos
@parse_neg:
subleq @is_neg @n_1
subleq @digit_char @digit_char @parse_digit
@parse_pos:
; TODO shorter multiplication
@mult_n_by_10:
subleq @mul_tmp1 @mul_tmp1
subleq @mul_tmp1 @parsed_int
subleq @mul_tmp1 @parsed_int
subleq @parsed_int @parsed_int
subleq @parsed_int @mul_tmp1
subleq @parsed_int @mul_tmp1
subleq @parsed_int @mul_tmp1
subleq @parsed_int @mul_tmp1
subleq @parsed_int @mul_tmp1
@parse_cont:
subleq @n_digit_char @n_digit_char
subleq @n_digit_char @digit_char
subleq @is_neg @OUT @acc_pos
@acc_neg:
subleq @parsed_int @digit_char
subleq @digit_char @digit_char @parse_digit
@acc_pos:
subleq @parsed_int @n_digit_char
subleq @digit_char @digit_char @parse_digit

@parse_done:
@write_int:
subleq @write_i:0 @parsed_int
subleq @write_i @n_1

subleq @num_count @1 @comp_next_stmt
subleq @parsed_int @parsed_int @parse_int




