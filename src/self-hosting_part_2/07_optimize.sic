@prog: .data 0 0 @init_j:@comp_start 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 @prog_end:0

@nop: @char: @n_digit_char: @mul_tmp: @write_tmp: .data 0
@digit_char: @n_inst_a: .data 0
@num_count: .data 0
@parsed_int: @n_inst_b: .data 0
@reset_c: @n_inst_c: @pfx_i: @is_neg: .data 0 ; must be the last one in the erasable sector

@comp_start:
@reset:
subleq @reset_c @reset_c
subleq @reset_c @32 ; anything [31, 127] works since reset loop will set it to 0 and break regardless
subleq @r_i @r_i
subleq @r_j @r_j

@reset_loop:
subleq @r_i:0 @r_j:0
subleq @r_i @n_1 @n_1:255 ; never jmps
subleq @r_j @n_1 @1:1 ; never jmps
subleq @reset_c @n_1 @reset_loop

@comp_next_stmt:
@pfx_trim:
subleq @pfx_i @pfx_i
subleq @pfx_i @5
@pfx_loop:
subleq @char @char
subleq @char @IN
subleq @pfx_i @n_1 @pfx_loop

subleq @char @n_33 @comp_subleq
subleq @char @32 @comp_data

@eval:
subleq @n_inst_a @n_inst_a
subleq @n_inst_a @ptr_a:0
subleq @inst_a @inst_a
subleq @inst_a @n_inst_a

subleq @n_inst_b @n_inst_b
subleq @n_inst_b @ptr_b:1
subleq @inst_b @inst_b
subleq @inst_b @n_inst_b

subleq @inst_a:0 @inst_b:0 @eval_jmp

@eval_cont:
subleq @ptr_a @n_3 @n_3:253 ; never jmps
subleq @ptr_b @n_3 @n_15:241 ; never jmps
subleq @ptr_c @n_3 @n_33:223 ; never jmps
subleq @n_inst_c @n_inst_c @eval

@eval_jmp:
subleq @n_inst_c @ptr_c:2
subleq @ptr_a @ptr_a
subleq @ptr_a @n_inst_c
subleq @n_inst_c @1
subleq @ptr_b @ptr_b
subleq @ptr_b @n_inst_c
subleq @ptr_c @ptr_c
subleq @ptr_c @n_inst_c
subleq @ptr_c @n_1
subleq @n_inst_c @n_inst_c @eval

@comp_data:
subleq @num_count @n_1 @32:32 ; never jmps
subleq @parsed_int @parsed_int @parse_int

@comp_subleq:
subleq @IN @IN
subleq @num_count @n_3 @5:5 ; never jmps
subleq @parsed_int @parsed_int @parse_int

@parse_int:
subleq @is_neg @is_neg
@parse_digit:
subleq @digit_char @IN
subleq @digit_char @n_33 @parse_digit_or_sign
subleq @digit_char @digit_char @parse_done
@parse_digit_or_sign:
subleq @digit_char @n_15 @parse_pos
@parse_neg:
subleq @is_neg @n_1
subleq @digit_char @digit_char @parse_digit
@parse_pos:
; TODO shorter multiplication
@mult_n_by_10:
subleq @mul_tmp @mul_tmp
subleq @mul_tmp @parsed_int
subleq @mul_tmp @parsed_int
subleq @mul_tmp @parsed_int
subleq @parsed_int @mul_tmp
subleq @parsed_int @mul_tmp
subleq @parsed_int @mul_tmp
@parse_cont:
subleq @n_digit_char @n_digit_char
subleq @n_digit_char @digit_char
subleq @is_neg @OUT @acc_pos
@acc_neg:
subleq @parsed_int @digit_char
subleq @digit_char @digit_char @parse_digit
@acc_pos:
subleq @parsed_int @n_digit_char
subleq @digit_char @digit_char @parse_digit

@parse_done:
@write_int:
subleq @write_i:0 @parsed_int
subleq @write_i @n_1

subleq @num_count @1 @comp_next_stmt
subleq @parsed_int @parsed_int @parse_int




